#!/usr/bin/env python
# coding: utf-8

# Recycling Costs Sensitivity Analysis

# In[1]:


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
import glob
import re

import fiona
import geopandas as gp
import matplotlib.pyplot as plt
import pandas as pd
from matplotlib import collections
import matplotlib.pyplot as plt
from shapely.geometry import LineString, Point, Polygon

get_ipython().run_line_magic('matplotlib', 'inline')


# ### Load all file scenarios

# The files I am going to load are the ones showed in the table below. This is to know which file correspond to what. I have not added the dates in the file name since they are autogenerated and it is a sanity check for me, but in reality the dates (numbers in front of the file name scenario) don't matter.
# ![scenarios_info_capacity.png](scenarios_info_capacity.png)

# In[2]:


cwd = os.getcwd()


# In[114]:


facility_label = ['Manufacturing', 'Recycling']
location_label = ['NAICS', '40209']
factor_label_rec = ['0001','05', '1', '2', '5', '10']
factor_label_man = ['05', '1', '2'] # 0 is 0,5


# In[115]:


facility_label = ['Manufacturing_cap', 'Recycling_cap']
location_label = ['NAICS', '40209']
factor_label_rec = ['0001','05', '1', '2', '5', '10']
factor_label_man = ['05', '1', '2'] # 0 is 0,5


# In[4]:


files_list = []
for fac in facility_label:
    for loc in location_label:
        if fac == 'Manufacturing':
            for fac_man in factor_label_man:
                files_list.append(fac+'_'+loc+'_'+fac_man)
        else:
            for fac_rec in factor_label_rec:
                files_list.append(fac+'_'+loc+'_'+fac_rec) 


# In[5]:


files_list[6:]


# In[6]:


cwd = os.getcwd()


# In[7]:


testfile_path = glob.glob(os.path.join(cwd, "scenarios", files_list[6], 'plants.csv'))[0]


# In[8]:


read_file_test = pd.read_csv(testfile_path) 


# ### Load files

# In[28]:


for files in files_list[6:]:
    testfile_path = glob.glob(os.path.join(cwd, "scenarios", files, 'plants.csv'))[0]
    globals()['%s_plants' % (files)] = pd.read_csv(testfile_path) 


# In[41]:


for files in files_list[6:]:
    print('{}: {} locations'.format(files, len(globals()['%s_plants' % (files)]['location name'].unique())))


# In[50]:


year_list = list(range(2025, 2051, 1))


# In[111]:


# Initialize a grid of plots with an Axes for each walk
grid = sns.FacetGrid(Recycling_NAICS_05_plants, col="location name",
                     col_wrap=9, height=1.5)

# Draw a horizontal line to show the starting point
grid.refline(y=0, linestyle=":")

# Draw a line plot to show the trajectory of each random walk
grid.map(plt.plot, "year", "utilization factor (%)")
grid.set_titles(row_template = '{row_name}', col_template = '{col_name}', size=5)

# Adjust the tick positions and labels

#grid.set(xaxis = year_list)
# Adjust the arrangement of the plots
grid.fig.tight_layout(w_pad=1)


# In[112]:


# Initialize a grid of plots with an Axes for each walk
grid = sns.FacetGrid(Recycling_NAICS_1_plants, col="location name",
                     col_wrap=9, height=1.5)

# Draw a horizontal line to show the starting point
grid.refline(y=0, linestyle=":")

# Draw a line plot to show the trajectory of each random walk
grid.map(plt.plot, "year", "utilization factor (%)")
grid.set_titles(row_template = '{row_name}', col_template = '{col_name}', size=5)

# Adjust the tick positions and labels

#grid.set(xaxis = year_list)
# Adjust the arrangement of the plots
grid.fig.tight_layout(w_pad=1)


# In[113]:


# Initialize a grid of plots with an Axes for each walk
grid = sns.FacetGrid(Recycling_NAICS_2_plants, col="location name",
                     col_wrap=9, height=1.5)

# Draw a horizontal line to show the starting point
grid.refline(y=0, linestyle=":")

# Draw a line plot to show the trajectory of each random walk
grid.map(plt.plot, "year", "utilization factor (%)")
grid.set_titles(row_template = '{row_name}', col_template = '{col_name}', size=5)

# Adjust the tick positions and labels

#grid.set(xaxis = year_list)
# Adjust the arrangement of the plots
grid.fig.tight_layout(w_pad=1)


# In[ ]:





# In[98]:


# Initialize a grid of plots with an Axes for each walk
grid = sns.FacetGrid(Recycling_NAICS_10_plants, col="location name",
                     col_wrap=9, height=1.5)

# Draw a horizontal line to show the starting point
grid.refline(y=0, linestyle=":")

# Draw a line plot to show the trajectory of each random walk
grid.map(plt.plot, "year", "total cost ($)")
grid.set_titles(row_template = '{row_name}', col_template = '{col_name}', size=5)

#grid.set_titles(col_template=Recycling_NAICS_05_plants["location name"].unique())
# Adjust the tick positions and labels
#grid.set(xlim=(1, 26), ylim=(0, 100))

# Adjust the arrangement of the plots
grid.fig.tight_layout(w_pad=1)


# In[ ]:





# In[ ]:




